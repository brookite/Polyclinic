-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.polyclinics
(
    "number" integer NOT NULL,
    address character varying(128) NOT NULL,
    name character varying(64) NOT NULL,
    opening_hours character varying(32) NOT NULL,
    PRIMARY KEY ("number"),
    UNIQUE ("number"),
    UNIQUE (address),
    UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.doctors
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 CACHE 1 ),
    fio character varying(128) NOT NULL,
    specialization character varying(64) NOT NULL,
    category character varying(64) NOT NULL,
    passport_data character varying(128) NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (passport_data)
);

CREATE TABLE IF NOT EXISTS public.patients
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 CACHE 1 ),
    fio character varying(128) NOT NULL,
    gender character(1) NOT NULL,
    address character varying(128) NOT NULL,
    phone_number character varying(32) NOT NULL,
    birthday date,
    passport_data character varying(128) NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (id),
    UNIQUE (passport_data)
);

CREATE TABLE IF NOT EXISTS public.doctor_workshifts
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 CACHE 1 ),
    weekday smallint NOT NULL,
    begin_time time without time zone NOT NULL,
    end_time time without time zone NOT NULL,
    doctor_id integer NOT NULL,
    office_id integer NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (id)
);

CREATE TABLE IF NOT EXISTS public.doctor_appointments
(
    datetime timestamp with time zone NOT NULL,
    workshift_id integer NOT NULL,
    patient_id integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.medicaments
(
    name character varying(64) NOT NULL,
    contraindications text,
    indications text,
    PRIMARY KEY (name),
    UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS public.diseases
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 CACHE 1 ),
    name character varying(64) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.patient_tests
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 CACHE 1 ),
    name character varying(128) NOT NULL,
    datetime timestamp with time zone NOT NULL,
    cost double precision NOT NULL,
    file_id integer NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.patient_files
(
    record_id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 CACHE 1 ),
    symptoms text NOT NULL,
    treatment_course text NOT NULL,
    first_visit date NOT NULL,
    recovery_date date,
    owner_id integer NOT NULL,
    PRIMARY KEY (record_id)
);

CREATE TABLE IF NOT EXISTS public.employees
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 CACHE 1 ),
    fio character varying(128) NOT NULL,
    birthdate date,
    address character varying(128) NOT NULL,
    employment_date date,
    passport_data character varying(128) NOT NULL,
    post character varying(64) NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (passport_data)
);

CREATE TABLE IF NOT EXISTS public.doctor_offices
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 CACHE 1 ),
    "number" character varying(16) NOT NULL,
    floor integer NOT NULL,
    polyclinic_number integer NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.employees_polyclinics
(
    employee_id integer NOT NULL,
    polyclinic_number integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.doctors_polyclinics
(
    doctor_id integer NOT NULL,
    polyclinic_number integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.patient_files_medicaments
(
    patient_file_record_id integer NOT NULL,
    medicament_name character varying(64) NOT NULL
);

CREATE TABLE IF NOT EXISTS public.diseases_medicaments
(
    disease_id integer NOT NULL,
    medicament_name character varying(64) NOT NULL
);

CREATE TABLE IF NOT EXISTS public.patient_files_diseases
(
    patient_file_record_id integer NOT NULL,
    disease_id integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.doctors_patient_files
(
    doctor_id integer NOT NULL,
    patient_file_record_id integer NOT NULL
);

ALTER TABLE IF EXISTS public.doctor_workshifts
    ADD FOREIGN KEY (doctor_id)
    REFERENCES public.doctors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.doctor_workshifts
    ADD FOREIGN KEY (office_id)
    REFERENCES public.doctor_offices (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.doctor_appointments
    ADD FOREIGN KEY (patient_id)
    REFERENCES public.patients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.doctor_appointments
    ADD FOREIGN KEY (workshift_id)
    REFERENCES public.doctor_workshifts (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_tests
    ADD FOREIGN KEY (file_id)
    REFERENCES public.patient_files (record_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_files
    ADD FOREIGN KEY (owner_id)
    REFERENCES public.patients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.doctor_offices
    ADD FOREIGN KEY (polyclinic_number)
    REFERENCES public.polyclinics ("number") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.employees_polyclinics
    ADD FOREIGN KEY (employee_id)
    REFERENCES public.employees (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.employees_polyclinics
    ADD FOREIGN KEY (polyclinic_number)
    REFERENCES public.polyclinics ("number") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.doctors_polyclinics
    ADD FOREIGN KEY (doctor_id)
    REFERENCES public.doctors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.doctors_polyclinics
    ADD FOREIGN KEY (polyclinic_number)
    REFERENCES public.polyclinics ("number") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_files_medicaments
    ADD FOREIGN KEY (patient_file_record_id)
    REFERENCES public.patient_files (record_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_files_medicaments
    ADD FOREIGN KEY (medicament_name)
    REFERENCES public.medicaments (name) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.diseases_medicaments
    ADD FOREIGN KEY (disease_id)
    REFERENCES public.diseases (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.diseases_medicaments
    ADD FOREIGN KEY (medicament_name)
    REFERENCES public.medicaments (name) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_files_diseases
    ADD FOREIGN KEY (patient_file_record_id)
    REFERENCES public.patient_files (record_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_files_diseases
    ADD FOREIGN KEY (disease_id)
    REFERENCES public.diseases (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.doctors_patient_files
    ADD FOREIGN KEY (doctor_id)
    REFERENCES public.doctors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.doctors_patient_files
    ADD FOREIGN KEY (patient_file_record_id)
    REFERENCES public.patient_files (record_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;